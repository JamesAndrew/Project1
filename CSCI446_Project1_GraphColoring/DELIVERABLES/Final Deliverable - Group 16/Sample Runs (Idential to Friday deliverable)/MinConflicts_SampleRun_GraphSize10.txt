=== Starting Runs ===
Number of graphs for each solver: 1
Vertex growth size: 1
Solvers being used: MinConflictsSolver, 

= Printing Vertex Locations =
Vertex 0: (0.119000, 0.143000)
Vertex 1: (0.528000, 0.279000)
Vertex 2: (0.338000, 0.544000)
Vertex 3: (0.500000, 0.419000)
Vertex 4: (0.275000, 0.635000)
Vertex 5: (0.689000, 0.166000)
Vertex 6: (0.206000, 0.805000)
Vertex 7: (0.881000, 0.255000)
Vertex 8: (0.959000, 0.049000)
Vertex 9: (0.997000, 0.201000)


=== Printing Graph State... ===
Graph node 0. Printing vertex details...
Vertex number: 0, Location: (0.119000, 0.143000), Color: -1
Edges: 1, 2, 4, 5, 6, 8, 
Graph node 1. Printing vertex details...
Vertex number: 1, Location: (0.528000, 0.279000), Color: -1
Edges: 0, 2, 3, 5, 7, 
Graph node 2. Printing vertex details...
Vertex number: 2, Location: (0.338000, 0.544000), Color: -1
Edges: 0, 1, 3, 4, 6, 
Graph node 3. Printing vertex details...
Vertex number: 3, Location: (0.500000, 0.419000), Color: -1
Edges: 1, 2, 6, 7, 
Graph node 4. Printing vertex details...
Vertex number: 4, Location: (0.275000, 0.635000), Color: -1
Edges: 0, 2, 6, 
Graph node 5. Printing vertex details...
Vertex number: 5, Location: (0.689000, 0.166000), Color: -1
Edges: 0, 1, 7, 8, 
Graph node 6. Printing vertex details...
Vertex number: 6, Location: (0.206000, 0.805000), Color: -1
Edges: 0, 2, 3, 4, 7, 9, 
Graph node 7. Printing vertex details...
Vertex number: 7, Location: (0.881000, 0.255000), Color: -1
Edges: 1, 3, 5, 6, 8, 9, 
Graph node 8. Printing vertex details...
Vertex number: 8, Location: (0.959000, 0.049000), Color: -1
Edges: 0, 5, 7, 9, 
Graph node 9. Printing vertex details...
Vertex number: 9, Location: (0.997000, 0.201000), Color: -1
Edges: 6, 7, 8, 

= Running next solver =
Current algorithm: MinConflictsSolver
Graph size: 10
Tunable parameter settings:
Number of allowed steps: 10


== Initialization phase ==
Gave vertex 0 color 1.
Gave vertex 1 color 2.
Gave vertex 2 color 2.
Gave vertex 3 color 1.
Gave vertex 4 color 1.
Gave vertex 5 color 2.
Gave vertex 6 color 1.
Gave vertex 7 color 3.
Gave vertex 8 color 3.
Gave vertex 9 color 3.
step 0

Checking conflicts of Node 0
Node 0 has least number of conflicts at 2 conflicts
If Node 0 colored with color 1
Node 0 has least number of conflicts at 2 conflicts
Node 0 has least number of conflicts at 2 conflicts
If Node 0 colored with color 2
Node 0 has least number of conflicts at 3 conflicts
If Node 0 colored with color 3
Node 0 has least number of conflicts at 1 conflicts
Node 0 has least number of conflicts at 1 conflicts
If Node 0 colored with color 4
Node 0 has least number of conflicts at 0 conflicts
Node 0 has least number of conflicts at 0 conflicts
Gave vertex 0 color 4.

Checking conflicts of Node 1
Node 1 has least number of conflicts at 2 conflicts
If Node 1 colored with color 1
Node 1 has least number of conflicts at 1 conflicts
Node 1 has least number of conflicts at 1 conflicts
If Node 1 colored with color 2
Node 1 has least number of conflicts at 2 conflicts
If Node 1 colored with color 3
Node 1 has least number of conflicts at 1 conflicts
If Node 1 colored with color 4
Node 1 has least number of conflicts at 1 conflicts
Gave vertex 1 color 1.

Checking conflicts of Node 2
Node 2 has least number of conflicts at 0 conflicts
Gave vertex 2 color 2.

Checking conflicts of Node 3
Node 3 has least number of conflicts at 2 conflicts
If Node 3 colored with color 1
Node 3 has least number of conflicts at 2 conflicts
Node 3 has least number of conflicts at 2 conflicts
If Node 3 colored with color 2
Node 3 has least number of conflicts at 1 conflicts
Node 3 has least number of conflicts at 1 conflicts
If Node 3 colored with color 3
Node 3 has least number of conflicts at 1 conflicts
If Node 3 colored with color 4
Node 3 has least number of conflicts at 0 conflicts
Node 3 has least number of conflicts at 0 conflicts
Gave vertex 3 color 4.

Checking conflicts of Node 4
Node 4 has least number of conflicts at 1 conflicts
If Node 4 colored with color 1
Node 4 has least number of conflicts at 1 conflicts
Node 4 has least number of conflicts at 1 conflicts
If Node 4 colored with color 2
Node 4 has least number of conflicts at 1 conflicts
If Node 4 colored with color 3
Node 4 has least number of conflicts at 0 conflicts
Node 4 has least number of conflicts at 0 conflicts
If Node 4 colored with color 4
Node 4 has least number of conflicts at 1 conflicts
Gave vertex 4 color 3.

Checking conflicts of Node 5
Node 5 has least number of conflicts at 0 conflicts
Gave vertex 5 color 2.

Checking conflicts of Node 6
Node 6 has least number of conflicts at 0 conflicts
Gave vertex 6 color 1.

Checking conflicts of Node 7
Node 7 has least number of conflicts at 2 conflicts
If Node 7 colored with color 1
Node 7 has least number of conflicts at 2 conflicts
Node 7 has least number of conflicts at 2 conflicts
If Node 7 colored with color 2
Node 7 has least number of conflicts at 1 conflicts
Node 7 has least number of conflicts at 1 conflicts
If Node 7 colored with color 3
Node 7 has least number of conflicts at 2 conflicts
If Node 7 colored with color 4
Node 7 has least number of conflicts at 1 conflicts
Gave vertex 7 color 2.

Checking conflicts of Node 8
Node 8 has least number of conflicts at 1 conflicts
If Node 8 colored with color 1
Node 8 has least number of conflicts at 0 conflicts
Node 8 has least number of conflicts at 0 conflicts
If Node 8 colored with color 2
Node 8 has least number of conflicts at 2 conflicts
If Node 8 colored with color 3
Node 8 has least number of conflicts at 1 conflicts
If Node 8 colored with color 4
Node 8 has least number of conflicts at 1 conflicts
Gave vertex 8 color 1.

Checking conflicts of Node 9
Node 9 has least number of conflicts at 0 conflicts
Gave vertex 9 color 3.

Not a solution

step 1

Checking conflicts of Node 0
Node 0 has least number of conflicts at 0 conflicts
Gave vertex 0 color 4.

Checking conflicts of Node 1
Node 1 has least number of conflicts at 0 conflicts
Gave vertex 1 color 1.

Checking conflicts of Node 2
Node 2 has least number of conflicts at 0 conflicts
Gave vertex 2 color 2.

Checking conflicts of Node 3
Node 3 has least number of conflicts at 0 conflicts
Gave vertex 3 color 4.

Checking conflicts of Node 4
Node 4 has least number of conflicts at 0 conflicts
Gave vertex 4 color 3.

Checking conflicts of Node 5
Node 5 has least number of conflicts at 1 conflicts
If Node 5 colored with color 1
Node 5 has least number of conflicts at 2 conflicts
Node 5 has least number of conflicts at 2 conflicts
If Node 5 colored with color 2
Node 5 has least number of conflicts at 1 conflicts
Node 5 has least number of conflicts at 1 conflicts
If Node 5 colored with color 3
Node 5 has least number of conflicts at 0 conflicts
Node 5 has least number of conflicts at 0 conflicts
If Node 5 colored with color 4
Node 5 has least number of conflicts at 1 conflicts
Gave vertex 5 color 3.

Checking conflicts of Node 6
Node 6 has least number of conflicts at 0 conflicts
Gave vertex 6 color 1.

Checking conflicts of Node 7
Node 7 has least number of conflicts at 0 conflicts
Gave vertex 7 color 2.

Checking conflicts of Node 8
Node 8 has least number of conflicts at 0 conflicts
Gave vertex 8 color 1.

Checking conflicts of Node 9
Node 9 has least number of conflicts at 0 conflicts
Gave vertex 9 color 3.

It's a solution


=== Printing Graph State... ===
Graph node 0. Printing vertex details...
Vertex number: 0, Location: (0.119000, 0.143000), Color: 4, Fitness: true
Edges: 1, 2, 4, 5, 6, 8, 
Graph node 1. Printing vertex details...
Vertex number: 1, Location: (0.528000, 0.279000), Color: 1, Fitness: true
Edges: 0, 2, 3, 5, 7, 
Graph node 2. Printing vertex details...
Vertex number: 2, Location: (0.338000, 0.544000), Color: 2, Fitness: true
Edges: 0, 1, 3, 4, 6, 
Graph node 3. Printing vertex details...
Vertex number: 3, Location: (0.500000, 0.419000), Color: 4, Fitness: true
Edges: 1, 2, 6, 7, 
Graph node 4. Printing vertex details...
Vertex number: 4, Location: (0.275000, 0.635000), Color: 3, Fitness: true
Edges: 0, 2, 6, 
Graph node 5. Printing vertex details...
Vertex number: 5, Location: (0.689000, 0.166000), Color: 3, Fitness: true
Edges: 0, 1, 7, 8, 
Graph node 6. Printing vertex details...
Vertex number: 6, Location: (0.206000, 0.805000), Color: 1, Fitness: true
Edges: 0, 2, 3, 4, 7, 9, 
Graph node 7. Printing vertex details...
Vertex number: 7, Location: (0.881000, 0.255000), Color: 2, Fitness: true
Edges: 1, 3, 5, 6, 8, 9, 
Graph node 8. Printing vertex details...
Vertex number: 8, Location: (0.959000, 0.049000), Color: 1, Fitness: true
Edges: 0, 5, 7, 9, 
Graph node 9. Printing vertex details...
Vertex number: 9, Location: (0.997000, 0.201000), Color: 3, Fitness: true
Edges: 6, 7, 8, 


=== Program Output Values ===
Valid Coloring: true, with 10 of 10 nodes correctly colored.
Decisions Made: 421

minConflicts finished

